//AUTOR: CARLOS ESCOBAR
//FECHA DE CREACIÓN: 20/07/2023
//ÚLTIMA MODIFICACIÓN: 20/07/2023

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

/*******************************LIBRERIAS***********************************/
#include <stdio.h>
#include <xc.h>
#include <stdint.h>
#include <stdlib.h>
#include <pic16f887.h>
#include "librerias_lab2.h"
#include "LCD.h"

#define _XTAL_FREQ 8000000 //FRECUENCIA DEL OSCILADOR 
int ADC_voltaje, ADC_voltaje_nc;

//VARIABLES PARA LA PANTALLA
uint8_t centenas;
uint8_t decenas;
uint8_t unidades;
uint8_t residuo;

uint8_t flags; 

#define _XTAL_FREQ 8000000
#define RS RD2
#define EN RD3
#define D4 RD4
#define D5 RB5
#define D6 RD6
#define D7 RD7

//PROTOTIPOS
void setup(void);
void displays(int num);

void __interrupt() isr(void) //INTERRUPCIONES 
{
    if (PIR1bits.ADIF == 1) //SI LA BANDERA DEL ADC ESTÁ ACTIVADA   
    {
        if (ADCON0bits.CHS == 0b0000)
        {
            PORTC = adc_read();
            ADC_voltaje_nc = adc_read();
            
        }
        else 
        {
            PORTC = adc_read();
        }
        ADIF = 0;
        return;
    }
}


void setup(void)
{
    ANSEL = 0b00000001; //UNA ENTRADA ANALÓGICA
    ANSELH = 0x00;
    
    TRISA = 0b00000001; //una entrada en el puerto A
    PORTA = 0x00; //LIMPIEZA DE PUERTO A 
   
    TRISB = 0x00;
    PORTB = 0x00;
    
    TRISC = 0x00; //TODAS SALIDAS EN EL PUERTO C
    PORTC = 0x00;//LIMPIEZA DEL PUERTO C
    
    TRISD = 0x00; //
    PORTD = 0x00;
    
    //CONFIGURACIÓN DEL OSCILADOR
    OSCCONbits.IRCF = 0b111; //8 Mhz
    OSCCONbits.SCS = 1; //RELOJ INTERNO

    adc_init(0); //CANAL ANALÓGICO 0, inicializa el ADC
    
    //INTERRUPCIONES GLOBALES Y PERIFÉRICAS
    INTCONbits.PEIE = 1;
    INTCONbits.GIE = 1; //HABILITA LAS INTERRUPCIONES GLOBALES
    
    
}


void main(void)
{
    setup();
    ADCON0bits.GO = 1; //REALIZA CONVERSIÓN DEL ADC
    unsigned int a;
    Lcd_Init();
    
    while(1)
    {
        ADC_voltaje = (int)(ADC_voltaje_nc* ((float)5/255) * 100);
        displays(ADC_voltaje);
        
        PORTB = centenas;
        
        if (ADCON0bits.GO == 0)
        {
            __delay_ms(10);
            ADCON0bits.GO = 1; //REALIZA CONVERSIÓN DEL ADC
        }
        
        Lcd_Clear();
        
        Lcd_Set_Cursor(1,1);
        Lcd_Write_String("Voltaje Pot");
        
        Lcd_Set_Cursor(2,1);
        char valor_c = centenas + '0';
        Lcd_Write_Char(valor_c);
        
        Lcd_Set_Cursor(2,2);
        Lcd_Write_Char('.');
      
        Lcd_Set_Cursor(2,3);
        char valor_d = decenas + '0';
        Lcd_Write_Char(valor_d);
        
        Lcd_Set_Cursor(2,4);
        char valor_u = unidades + '0';
        Lcd_Write_Char(valor_u);
         __delay_ms(500);
        
        
        
    }
    
}

void displays(int num)
{
    centenas= (uint8_t)(num/100);
    residuo = num%100;
    
    decenas = residuo /10;
    residuo = residuo % 10;
    
    unidades = residuo;
    return;
    
}
